import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

// Backend API URL
const apiURL = 'http://127.0.0.1:3000';

// Async Thunks: Functions that handle asynchronous operations and dispatch actions
// Fetch reservations from the API and return the data
export const fetchReservations = createAsyncThunk('reservation/fetchReservations', async () => axios.get(`${apiURL}/api/v1/reservations`).then((response) => response.data));

// Add a new reservation to the API and return the added data
export const addReservation = createAsyncThunk('reservation/addReservation', async (formData) => axios.post(`${apiURL}/api/v1/reservations`, { reservation: formData }).then((response) => response.data));

export const deleteReservation = createAsyncThunk('reservation/deleteReservation', async (reservationId) => {
  // Delete a reservation from the API and return the deleted reservation's ID
  await axios.delete(`${apiURL}/api/v1/reservations/${reservationId}`);
  return reservationId;
});

// Slice: Defines the structure of the Redux slice
const reservationSlice = createSlice({
  name: 'reservation', // Name of the slice
  initialState: { data: [], status: 'idle', error: null }, // Initial state
  reducers: {}, // Regular Redux reducers (none in this case)
  extraReducers: (builder) => {
    // Loop through each async thunk to handle pending, fulfilled, and rejected states
    ['fetchReservations', 'addReservation', 'deleteReservation'].forEach((actionType) => {
      builder
        .addCase(reservationSlice.thunks[actionType].pending, (state) => { state.status = 'loading'; }) // Handle pending state
        .addCase(reservationSlice.thunks[actionType].fulfilled, (state, action) => {
          state.status = 'succeeded'; // Handle fulfilled state
          state.data = action.payload; // Update state with fetched or added data
        })
        .addCase(reservationSlice.thunks[actionType].rejected, (state, action) => {
          state.status = 'failed'; // Handle rejected state
          state.error = action.error.message; // Store the error message
        });
    });
  },
});

// Export the reducer generated by createSlice
export default reservationSlice.reducer;
